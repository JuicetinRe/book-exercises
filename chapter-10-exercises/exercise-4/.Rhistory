# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
cd ~Desktop
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
cd ~Desktop\book-exercises\chapter-10-exercises\exercise-4
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
cd Desktop\book-exercises\chapter-10-exercises\exercise-4
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
setwd("~Desktop/book-exercises/chapter-10-exercises/exercise-4/data")
read <- read.csv(file = 'data/gates_money.csv')
View(read)
View(read)
# Use the View function to look at the loaded data
View(read)
View(read)
View(read)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- read[read$organization]
read <- read.csv(file = 'data/gates_money.csv', stringsAsFactors = FALSE)
View(read)
grants <- read.csv(file = 'data/gates_money.csv', stringsAsFactors = FALSE)
# What was the mean grant value?
mean(grants$total_amount)
# Which organization received the largest grant?
frants[grants$total_amount == max(grants$total_amount), ]
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), ]
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization" ]
# How many grants were awarded in 2010?
nrow(grants[grants$start_year == "2010", ])
install.packages(c("devtools", "fueleconomy"))
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("dplyr")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install,packages("dplyr")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("dplyr")
library(dplyr)
library("dplyr")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flighs, dealyed_in_air)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, dealyed_in_air = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, dealyed_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayyed_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg - mean(delayed_in_air), na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air), na.rm = TRUE)
to_sea <- filter(flights, dest == "SEA")
to_sea <- select(to_sea, orgin, des, delayed_in_air)
to_sea <- select(to_sea, origin, des, delayed_in_air)
to_sea <- select(to_sea, origin, dest, delayed_in_air)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg_delayed - mean(delayed_in_air, na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg.delayed - mean(delayed_in_air, na.rm = TRUE))
